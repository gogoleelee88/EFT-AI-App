import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Button from '../ui/Button';
import { getServerAI } from '../../services/serverAI';
import type { ChatResponse, ConversationMessage, EmotionAnalysis, EFTRecommendation } from '../../types/serverAI';

interface Message {
  role: 'user' | 'ai';
  content: string;
  timestamp: number;
  metadata?: {
    emotion_analysis?: EmotionAnalysis;
    eft_recommendations?: EFTRecommendation[];
    confidence: number;
    processing_time?: number;
    emergency_detected?: boolean;
    professional_referral?: boolean;
  };
}

interface AIChatProps {
  userId: string;
}

type AITier = 'free' | 'premium' | 'enterprise';

const AIChat: React.FC<AIChatProps> = ({ userId }) => {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [serverAI] = useState(() => getServerAI());
  const [serverStatus, setServerStatus] = useState<'checking' | 'online' | 'offline'>('checking');
  const [selectedTier, setSelectedTier] = useState<AITier>('premium'); // Llama 3.1 ÏÇ¨Ïö©!
  const [availableTiers, setAvailableTiers] = useState<AITier[]>(['free', 'premium', 'enterprise']);
  const [showTierSelector, setShowTierSelector] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const tierSelectorRef = useRef<HTMLDivElement>(null);

  // Îí§Î°úÍ∞ÄÍ∏∞ Ìï∏Îì§Îü¨
  const handleGoBack = () => {
    navigate('/');
  };

  // ÌÄòÏä§Ìä∏ ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ (Î°úÏª¨ Ï≤òÎ¶¨)
  const handleQuestProgress = (questId: string, progress: number) => {
    console.log(`ÌÄòÏä§Ìä∏ ÏßÑÌñâ: ${questId} +${progress}%`);
    // TODO: localStorageÎÇò Context APIÎ°ú ÌÄòÏä§Ìä∏ ÏßÑÌñâÎ•† Ï†ÄÏû•
  };

  // ÏÑúÎ≤Ñ ÏÉÅÌÉú Ï≤¥ÌÅ¨ Î∞è Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    const initializeAI = async () => {
      try {
        const healthResponse = await fetch('http://localhost:8000/health');
        const healthData = await healthResponse.json();
        
        if (healthData.free_ai_engine === 'loaded') {
          setServerStatus('online');
          setAvailableTiers(healthData.available_tiers || ['free', 'premium', 'enterprise']);
          
          // Llama 3.1Ïù¥ Î°úÎìúÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑ†ÌÉù
          if (healthData.premium_ai_engine === 'loaded' || healthData.premium_ai_engine === 'loading') {
            setSelectedTier('premium');
          }
          
          const initialMessage: Message = {
            role: 'ai',
            content: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî EFT Ï†ÑÎ¨∏ AI ÏÉÅÎã¥ÏÇ¨ÏûÖÎãàÎã§. üåø\n\nüöÄ **Llama 3.1 ÏµúÏã† AI ÏóÖÍ∑∏Î†àÏù¥Îìú ÏôÑÎ£å!**\nÏù¥Ï†ú ÎçîÏö± Ï†ÑÎ¨∏Ï†ÅÏù¥Í≥† Í≥µÍ∞êÏ†ÅÏù∏ ÏÉÅÎã¥Ïù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.\n\nÏò§ÎäòÏùÄ Ïñ¥Îñ§ ÎßàÏùåÏúºÎ°ú Ï∞æÏïÑÏò§ÏÖ®ÎÇòÏöî? Ìé∏ÏïàÌïòÍ≤å Ïù¥ÏïºÍ∏∞Ìï¥ Ï£ºÏÑ∏Ïöî.",
            timestamp: Date.now(),
            metadata: {
              confidence: 1.0,
              processing_time: 0
            }
          };
          
          setMessages([initialMessage]);
        } else {
          setServerStatus('offline');
          
          const errorMessage: Message = {
            role: 'ai',
            content: "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÌòÑÏû¨ Llama 3.1 AI ÏÑúÎ≤ÑÍ∞Ä Î°úÎìú Ï§ëÏûÖÎãàÎã§. üöÄ\n\nÏóÖÍ∑∏Î†àÏù¥ÎìúÎêú AI Î™®Îç∏ÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏäµÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§ Ï£ºÏÑ∏Ïöî!",
            timestamp: Date.now(),
            metadata: { confidence: 0.3 }
          };
          
          setMessages([errorMessage]);
        }
      } catch (error) {
        console.error('ÏÑúÎ≤Ñ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
        setServerStatus('offline');
      }
    };

    initializeAI();
    
    // ÏûêÎèô Ìè¨Ïª§Ïä§
    setTimeout(() => {
      inputRef.current?.focus();
    }, 1000);
  }, [serverAI]);

  // Î©îÏãúÏßÄ Î™©Î°ù ÏûêÎèô Ïä§ÌÅ¨Î°§
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Ìã∞Ïñ¥ ÏÑ†ÌÉù Ïô∏Î∂Ä ÌÅ¥Î¶≠ Í∞êÏßÄ
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (tierSelectorRef.current && !tierSelectorRef.current.contains(event.target as Node)) {
        setShowTierSelector(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï≤òÎ¶¨ (ÏÉàÎ°úÏö¥ ÏÑúÎ≤Ñ AI ÏÇ¨Ïö©)
  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading || serverStatus !== 'online') return;

    const userMessage: Message = {
      role: 'user',
      content: inputMessage.trim(),
      timestamp: Date.now()
    };

    // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      console.log(`ü§ñ ÏÑúÎ≤Ñ AIÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ° (${selectedTier} Ìã∞Ïñ¥):`, userMessage.content);
      
      // Ìã∞Ïñ¥Î≥Ñ API ÏóîÎìúÌè¨Ïù∏Ìä∏ Í≤∞Ï†ï
      const endpoint = selectedTier === 'free' ? '/api/chat/free' : 
                     selectedTier === 'premium' ? '/api/chat/premium' : 
                     '/api/chat/free'; // enterpriseÎäî premiumÏúºÎ°ú Ìè¥Î∞±
      
      // Ìã∞Ïñ¥Î≥Ñ ÌÜ†ÌÅ∞ Ï†úÌïú ÏÑ§Ï†ï
      const maxTokens = selectedTier === 'free' ? 150 : 
                       selectedTier === 'premium' ? 400 : 
                       150; // Í∏∞Î≥∏Í∞í
      
      // ÏßÅÏ†ë API Ìò∏Ï∂ú (Ìã∞Ïñ¥Î≥Ñ)
      const response = await fetch(`http://localhost:8000${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage.content,
          conversation_history: [],
          max_tokens: maxTokens,
          temperature: 0.8,
          user_profile: {
            user_id: userId
          }
        })
      });
      
      if (!response.ok) {
        throw new Error(`API Ìò∏Ï∂ú Ïã§Ìå®: ${response.status}`);
      }
      
      const serverResponse: ChatResponse = await response.json();
      
      const aiMessage: Message = {
        role: 'ai',
        content: serverResponse.response,
        timestamp: Date.now(),
        metadata: {
          emotion_analysis: serverResponse.emotion_analysis,
          eft_recommendations: serverResponse.eft_recommendations,
          confidence: serverResponse.confidence_score,
          processing_time: serverResponse.processing_time,
          emergency_detected: serverResponse.emergency_detected,
          professional_referral: serverResponse.professional_referral
        }
      };

      setMessages(prev => [...prev, aiMessage]);

      // ÏùëÍ∏âÏÉÅÌô© Í∞êÏßÄ Ïãú ÌäπÎ≥Ñ Ï≤òÎ¶¨
      if (serverResponse.emergency_detected) {
        console.warn('üö® ÏùëÍ∏âÏÉÅÌô© Í∞êÏßÄÎê®');
        // TODO: ÏùëÍ∏âÏÉÅÌô© Ï≤òÎ¶¨ Î°úÏßÅ Ï∂îÍ∞Ä
      }

      // Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ Í∂åÏú† Ïãú ÏïåÎ¶º
      if (serverResponse.professional_referral) {
        console.info('‚ö†Ô∏è Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ Í∂åÏú†');
      }

      // Í∞êÏ†ï Í∏∞Î∞ò ÌÄòÏä§Ìä∏ ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
      const primaryEmotion = serverResponse.emotion_analysis.primary_emotion;
      if (primaryEmotion === 'stress' || primaryEmotion === 'Ïä§Ìä∏Î†àÏä§') {
        handleQuestProgress('stress_management', 8);
      } else if (primaryEmotion === 'sadness' || primaryEmotion === 'Ïä¨Ìîî') {
        handleQuestProgress('emotional_healing', 6);
      } else if (primaryEmotion === 'anxiety' || primaryEmotion === 'Î∂àÏïà') {
        handleQuestProgress('anxiety_relief', 7);
      }

      console.log('‚úÖ ÏÑúÎ≤Ñ AI ÏùëÎãµ ÏôÑÎ£å:', {
        emotion: primaryEmotion,
        confidence: serverResponse.confidence_score,
        processingTime: serverResponse.processing_time + 'ms',
        eftRecommendations: serverResponse.eft_recommendations.length
      });

    } catch (error) {
      console.error('‚ùå ÏÑúÎ≤Ñ AI ÏùëÎãµ Ïã§Ìå®:', error);
      
      const errorMessage: Message = {
        role: 'ai',
        content: serverStatus === 'offline' 
          ? "ÌòÑÏû¨ AI ÏÑúÎ≤ÑÏôÄ Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï¥ Ï£ºÏÑ∏Ïöî. üîß" 
          : "Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏùëÎãµ ÏÉùÏÑ± Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî. ü§î",
        timestamp: Date.now(),
        metadata: { 
          confidence: 0.3,
          processing_time: 0
        }
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Enter ÌÇ§ Ï≤òÎ¶¨
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Ï†úÏïà Î©îÏãúÏßÄ ÌÅ¥Î¶≠ Ï≤òÎ¶¨
  const handleSuggestionClick = (suggestion: string) => {
    setInputMessage(suggestion);
    inputRef.current?.focus();
  };

  // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ
  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('ko-KR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="flex flex-col h-screen lg:min-h-0 bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-50 lg:bg-transparent">
      {/* Ìó§Îçî */}
      <div className="bg-white shadow-lg border-b-2 border-indigo-100 sticky top-0 z-40">
        <div className="max-w-md mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <button 
                onClick={handleGoBack}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <span className="text-xl">‚Üê</span>
              </button>
              <div>
                <div className="font-bold text-gray-800">EFT AI Ï†ÑÎ¨∏ÏÉÅÎã¥</div>
                <div className="text-sm flex items-center space-x-2">
                  <span className={`w-2 h-2 rounded-full ${
                    serverStatus === 'online' ? 'bg-green-500' : 
                    serverStatus === 'offline' ? 'bg-red-500' : 'bg-yellow-500'
                  }`}></span>
                  <span className="text-gray-600">
                    {serverStatus === 'online' ? `${selectedTier.toUpperCase()} AI Ïò®ÎùºÏù∏` : 
                     serverStatus === 'offline' ? 'ÏÑúÎ≤Ñ Ïò§ÌîÑÎùºÏù∏' : 'Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...'}
                  </span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              {/* Ìã∞Ïñ¥ ÏÑ†ÌÉù Î≤ÑÌäº */}
              <div className="relative" ref={tierSelectorRef}>
                <button 
                  onClick={() => setShowTierSelector(!showTierSelector)}
                  className={`px-3 py-1 text-xs rounded-full border transition-colors ${
                    selectedTier === 'free' ? 'bg-gray-100 text-gray-700 border-gray-300' :
                    selectedTier === 'premium' ? 'bg-purple-100 text-purple-700 border-purple-300' :
                    'bg-gold-100 text-gold-700 border-gold-300'
                  }`}
                >
                  {selectedTier === 'free' ? 'üÜì Î¨¥Î£å' : 
                   selectedTier === 'premium' ? 'üíé ÌîÑÎ¶¨ÎØ∏ÏóÑ' : 'üè¢ Í∏∞ÏóÖ'}
                </button>
                
                {/* Ìã∞Ïñ¥ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ */}
                {showTierSelector && (
                  <div className="absolute top-full right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 w-40">
                    {availableTiers.includes('free') && (
                      <button
                        onClick={() => {
                          setSelectedTier('free');
                          setShowTierSelector(false);
                        }}
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-gray-50 ${
                          selectedTier === 'free' ? 'bg-gray-100' : ''
                        }`}
                      >
                        üÜì Î¨¥Î£å Ìã∞Ïñ¥<br />
                        <span className="text-xs text-gray-500">Í∏∞Î≥∏ ÎåÄÌôî (150ÌÜ†ÌÅ∞)</span>
                      </button>
                    )}
                    {availableTiers.includes('premium') && (
                      <button
                        onClick={() => {
                          setSelectedTier('premium');
                          setShowTierSelector(false);
                        }}
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-purple-50 border-t ${
                          selectedTier === 'premium' ? 'bg-purple-100' : ''
                        }`}
                      >
                        üíé ÌîÑÎ¶¨ÎØ∏ÏóÑ Ìã∞Ïñ¥ (NEW!)<br />
                        <span className="text-xs text-purple-500">Llama 3.1 Í≥†Í∏â ÏÉÅÎã¥ (400ÌÜ†ÌÅ∞)</span>
                      </button>
                    )}
                    {availableTiers.includes('enterprise') && (
                      <button
                        onClick={() => {
                          setSelectedTier('enterprise');
                          setShowTierSelector(false);
                        }}
                        className={`w-full text-left px-3 py-2 text-sm hover:bg-gold-50 border-t ${
                          selectedTier === 'enterprise' ? 'bg-gold-100' : ''
                        }`}
                      >
                        üè¢ Í∏∞ÏóÖ Ìã∞Ïñ¥ (BETA)<br />
                        <span className="text-xs text-gold-500">ÏµúÍ≥†Í∏â Î∂ÑÏÑù (Î¨¥Ï†úÌïú)</span>
                      </button>
                    )}
                  </div>
                )}
              </div>
              <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                <span className="text-lg">‚öö</span>
              </button>
              <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                <span className="text-lg">üì§</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* ÌòÑÏû¨ ÌÄòÏä§Ìä∏ ÏßÑÌñâÎ•† ÌëúÏãú */}
      <div className="bg-purple-50 border-b border-purple-100 px-4 py-2">
        <div className="max-w-md mx-auto">
          <div className="text-sm text-purple-700">
            üéØ ÌòÑÏû¨ ÌÄòÏä§Ìä∏: "Ïó∞Ïï† Ìå®ÌÑ¥ Î∂ÑÏÑù" 82%
          </div>
          <div className="text-xs text-purple-600">
            üí° Ïó∞Ïï† Í¥ÄÎ†® ÎåÄÌôî Ïãú Ï∂îÍ∞Ä ÏßÑÌñâÎ•†!
          </div>
        </div>
      </div>

      {/* Î©îÏãúÏßÄ Î™©Î°ù */}
      <div className="flex-1 overflow-y-auto px-4 py-4 space-y-4">
        <div className="max-w-md mx-auto space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-sm px-4 py-3 rounded-2xl ${
                  message.role === 'user'
                    ? 'bg-indigo-500 text-white'
                    : 'bg-white text-gray-800 border border-gray-200'
                }`}
              >
                <div className="whitespace-pre-wrap text-sm leading-relaxed">
                  {message.content}
                </div>
                <div className={`text-xs mt-2 ${
                  message.role === 'user' ? 'text-indigo-100' : 'text-gray-500'
                }`}>
                  {formatTime(message.timestamp)}
                  {message.metadata && (
                    <>
                      <span className="ml-1">‚Ä¢ {selectedTier.toUpperCase()} AI</span>
                      {message.metadata.confidence && (
                        <span className="ml-1">Ïã†Î¢∞ÎèÑ {Math.round(message.metadata.confidence * 100)}%</span>
                      )}
                      {message.metadata.processing_time && message.metadata.processing_time > 0 && (
                        <span className="ml-1">({message.metadata.processing_time.toFixed(1)}Ï¥à)</span>
                      )}
                      {message.metadata.emotion_analysis && (
                        <div className="mt-1 text-xs text-blue-600">
                          Í∞êÏ†ï: {message.metadata.emotion_analysis.primary_emotion} 
                          ({Math.round(message.metadata.emotion_analysis.intensity * 100)}%)
                        </div>
                      )}
                      {message.metadata.eft_recommendations && message.metadata.eft_recommendations.length > 0 && (
                        <div className="mt-1 text-xs text-green-600">
                          EFT Ï∂îÏ≤ú: {message.metadata.eft_recommendations.length}Í∞ú Í∏∞Î≤ï
                        </div>
                      )}
                      {message.metadata.emergency_detected && (
                        <div className="mt-1 text-xs text-red-600 font-medium">
                          üö® ÏùëÍ∏âÏÉÅÌô© Í∞êÏßÄ
                        </div>
                      )}
                      {message.metadata.professional_referral && (
                        <div className="mt-1 text-xs text-orange-600 font-medium">
                          ‚ö†Ô∏è Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥ Í∂åÏú†
                        </div>
                      )}
                    </>
                  )}
                </div>
              </div>
            </div>
          ))}

          {/* Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-white text-gray-800 border border-gray-200 px-4 py-3 rounded-2xl">
                <div className="flex items-center space-x-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm text-gray-600">AIÍ∞Ä ÏÉùÍ∞ÅÌïòÍ≥† ÏûàÏñ¥Ïöî...</span>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* ÏûÖÎ†• ÌûåÌä∏ (Ï≤´ ÎåÄÌôîÏùº ÎïåÎßå) */}
      {messages.length === 1 && (
        <div className="px-4 py-2 bg-blue-50 border-t border-blue-100">
          <div className="max-w-md mx-auto">
            <div className="text-sm text-blue-700 mb-2">üí° Ïù¥Îü∞ ÏãùÏúºÎ°ú ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî:</div>
            <div className="flex flex-wrap gap-2">
              {[
                "Ïò§Îäò ÎÑàÎ¨¥ ÌûòÎì§ÏóàÏñ¥Ïöî",
                "Ïä§Ìä∏Î†àÏä§Í∞Ä Ïã¨Ìï¥ÏÑú Ïû†Ïù¥ Ïïà ÏôÄÏöî",
                "ÎßàÏùåÏù¥ Î≥µÏû°ÌïòÍ≥† ÎãµÎãµÌï¥Ïöî",
                "ÏöîÏ¶ò Í∏∞Î∂ÑÏù¥ Ïù¥ÏÉÅÌï¥Ïöî"
              ].map((suggestion) => (
                <button
                  key={suggestion}
                  onClick={() => handleSuggestionClick(suggestion)}
                  className="text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded-full hover:bg-blue-200 transition-colors"
                >
                  "{suggestion}"
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Î©îÏãúÏßÄ ÏûÖÎ†• */}
      <div className="bg-white border-t border-gray-200 px-4 py-4">
        <div className="max-w-md mx-auto">
          <div className="flex space-x-3">
            <input
              ref={inputRef}
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
              disabled={isLoading}
              className="flex-1 px-4 py-3 border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="px-6 py-3 bg-indigo-500 text-white rounded-2xl hover:bg-indigo-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
            >
              Ï†ÑÏÜ°
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIChat;